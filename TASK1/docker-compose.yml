services:
  app:
    build: ./app
    container_name: app
    volumes:
      - ./app/db_data:/app/db_data
    ports:
      - "8000:8000"
    networks:
      - app-network
      - monitoring
    deploy:
      restart_policy:
        condition: on-failure

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./monitoring/prometheus/:/etc/prometheus/
      - ./monitoring/prometheus/prom_data/:/prometheus
    ports:
      - "9090:9090"
    networks:
      - monitoring
    deploy:
      restart_policy:
        condition: on-failure

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3000:3000"
    env_file:
      - ./monitoring/grafana/config.monitoring
    volumes:
      - ./monitoring/grafana/grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - monitoring
    deploy:
      restart_policy:
        condition: on-failure

  node_exporter:
    image: prom/node-exporter
    container_name: node_exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command: 
      - '--path.procfs=/host/proc' 
      - '--path.sysfs=/host/sys'
      - --collector.filesystem.ignored-mount-points
      - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"
    ports:
      - 9100:9100
    networks:
      - monitoring
    deploy:
      restart_policy:
        condition: on-failure

volumes:
  prometheus:
  grafana:
  app_data:

networks:
  app-network:
    name: app
  monitoring-network:
    name: monitoring
